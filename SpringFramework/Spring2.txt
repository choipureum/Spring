< @Autowired 의 바인딩 전략 >
 - 바인딩 : 실행코드와 정의코드가 연결되어 있는 것
 - 주로 메소드 호출코드와 메소드 정의코드가 연결되는 것을 의미한다
 - @Autowired는 객체변수와 Spring bean을 연결하는 것을 뜻한다(DI)

 	1.byType
		스프링 빈의 이름(id)에 상관없이 같은 타입의 bean이 한개만 존재한다면 바인딩
		같은 타입으로 등록된 bean이 2개 이상이면 예외 발생
		(NoUniqueBeanDefinitionException)
	2.byName
		같은 타입의 빈이 여러 개 등록되어있더라도 지정된 이름의 빈을 바인딩
		이름이 저장되지 않았다면 스프링 빈의 id와 멤버필드의 이름을 비교해서 바인딩

	**같은 이름으로 여러 개의 스프링 빈이 등록되어있을 경우는 고려하지 않아도 된다
		=> xml파일에서 id는 중복될 수 없기 때문에
	
< DI Annotation >

 1.@Autowired
	패키지 : org.springframework.beans.factory.annotation.Autowired
	스프링에서 제공하는 DI Annotation
	적용가능 위치 : 멤버필드, 생성자, 파라미터가 존재하는 메소드
	
	DI 전략 : byType 먼저, byName 다음
 2.@Resouce
	패키지 : javax.annotation.Resource
	자바 표준으로 제공되는 DI Annotation
	적용가능 위치 : 멤버필드, 파라미터가 1개인 setter
	
	DI 전략 : byName먼저, byType 

 3.@Inject
	패키지 : javax.inject.Inject
	자바 표준으로 제공되는 DI Annotation
	@Autowired와 동일한 기능을 제공
	스프링 3.0버전 이상부터 사용가능
	javax.inject-X.jar라이브러리가 필요하다
	@Resources 강화 버전

 ** @Qualifier("beanName")
	DI Annotation의 보조 기능
	바인딩될 스프링 빈의 이름(beanName)을 직접 지정할 수 있게 해주는 Annotation	

 <스프링 초기설정 >
 - pom.xml => java 1.8로 설정(build-path : 왼쪽 maven-project facets에서 java 버전 변경)
 - 스프링 프레임 워크 5.2.7로 변경

< Spring MyBatis 설치하기(연동하기) >
 - Maven Tool을 이용하여 라이브러리를 설치한다
 - maven 레퍼지토리에 있다.
 
< 필요 Librarys >
 - mybatis-spring
	스프링에서 마이바티스를 사용할 수 있도록 해주는 라이브러리
 - mybatis
	마이바티스 프레임워크
 - spring-jdbc
	스프링에서 JDBC를 사용할 수 있게 해주는 라이브러리
	스프링과 버전이 같아야한다(5.2.7)
 - ojdbc
	자바 프로그램이 오라클 DB에 연동할 수 있게 해주는 JDBC 라이브러리 
	
