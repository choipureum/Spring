< Spring FrameWork >
 - 자바를 이용한 프로그램 개발 프레임워크

 < Spring STS tool >
 - STS : Spring Tool Suite
 - 이클립스에 Spring FrameWork를 개발할 수 있도록 제공되는 툴

 < STS 배포 방식 2가지 >
 1. 이클립스에 플러그인 형태로 STS툴을 설치하는 방법
 2. STS tool을 다운받아 한번에 설치하는 방법(이클립스 + STS를 한 묶음으로 만들어 스프링 전용 툴을 만든것)

< 이클립스에 플러그인 형태로 STS 툴 설치하기 >
 - 이클립스 Help - Eclipse Marketplace 메뉴 선택하기
 - STS 검색
 - 검색결과에서 Spring Tools 3(standalone Edition) 3.9.13 RELEASE 항목 찾기
 - Install
 - Confirm 클릭
 - 라이센스 Accept 선택- Finish

< Spring 첫 프로젝트 만들기 >
 - File 메뉴 - new - other 선택
 - Spring 폴더 찾기
 - Spring Legacy Project 선택
 - 제일 밑 Spring MVC Project 선택
 - 프로젝트 이름과 Top-level-package 입력
 
< Spring Project에 적용되어 있는 JRE 버전 바꾸기 >
 -프로젝트 폴더 우클릭
 - BuilPath 메뉴 - Configure build path 클릭
 - 왼쪽 사이드 메뉴 중에서 Project Facets 선택
 - Java항목에서 1.6을 1.8로 선택
 -apply
 **Library 탭에서 JRE Library 삭제 후 다른 버전으로 바꿀 수 있다

< 프로젝트 적용된 스프링 버전 바꾸기 >
 - 프로젝트 내 pom.xml 파일 열기
 - <properties>태그 확인
 - <org.springframework-version> 항목의 값을 변경한 후 저장한다
 - 지금은 5.2.7.RELEASE가 적당한 버전
 ** 버전 정보를 변경하고 저장하면 곧바로 이클립스가 관련 라이브러리를 다운받음
 ** 잘못된 버전을 입력하거나 오타를 입력하면 버그가 생길 수 있으니 주의할 것

< Maven, 메이븐 >
 - 빌드(build) 관리 도구
 - 자바 프로젝트의 빌드를 자동화 해주는 툴이다
 - 프로그램 개발 라이프 사이클
 	: 소스코드 작성 -> 컴파일 -> 바이트코드 -> 빌드 -> 배포 -> 실행

 	** 빌드, build
	작성된 코드와 라이브러리 코드를 연결해서 실제 동작한 코드로 만드는 것

 - 프로그램이 실행될 때 필요한 라이브러리들을 관리해주는 툴
	** 빌드 관리 도구 종류 : Ant, Maven, Gradle,...

< pom.xml 설정 파일(Project Object Model) >

 - 프로젝트에서 관리할 라이브러리에 대한 정보를 입력해두는 설정 파일
 - 프로젝트의 정보를 입력해 놓는다
 - 사용할 라이브러리 정보도 입력해놓는다
 - 추가하려는 라이브러리를 <dependency>태그를 이용하여 설정한다
 	https://mvnrepository.com/ 사이트에서 검색하여 알아낸다
 - 추가 라이브러리들을 다운받아 놓는 로컬 저장소의 기본 경로
	-C:/Users/{컴퓨터 사용자이름}/.m2/repository/

< 메이븐 충돌(에러)가 발생한 상황 대처 >
 - 프로젝트 내 파일 중에서 빨간색 느낌표 아이콘이 붙어있을 때
 - 서버 시작 시 이클립스 콘솔에 메시지 중에서 invalid LOC header 라는 문구가 보일때
 - 위 두가지 상황은 메이븐 에러 상황이라고 판단가능
 - 에러가 난 라이브러리 저장소 폴더를 삭제하고 메이븐 업데이트를 수행한다
 - 에러가 난 라이브러리가 구분이 안되거나 해결이 안되면 저장소 폴더를 전체 삭제한다
 
	+ 대처 순서
	1. 이클립스 종료
	2. C:/Users/user/.m2/repository 폴더 삭제
	3. 이클립스 실행
	4. Progress 탭의 반응이 없을 때까지 기다린다(메이븐 재구축 과정)
	5. 해결!
	** 해결이 않되면 메이븐 문제가 아닐 가능성이 크다
	** pom.xml 자체에 문제가 있는 경우 해결되지 않음
	** 오타, 없는 버전을 <dependency>에서 명시한 경우

< 의존성 , Dependency >
 - 특정 객체가 작동하기 위해 필요한 외부 객체와의 연결
 	ex)
	public class EmpController
	//EmpController 클래스는 EmpService객체에 의존적이다.
		private EmpService empService = new EmpServiceImpl();
	}
 < 의존성 주입, Dependency Injection, DI >
 - 객체가 의존성을 직접 발생시키지 않고 외부의 도움을 받아 주입되는 것
 - 생성자 의존성 주입
 - Setter(메소드) 의존성 주입 

< IOC, Inversion Of Control >
 - 제어의 역전
 - 프로그램 흐름의 제어권이 역전되었다는 뜻
 - 프로그램의 동작 흐름을 스프링워크가 담당하게 된다







